//
//  HomeCell.swift
//  SwiftWB
//
//  Created by huangjinbiao on 17/2/23.
//  Copyright © 2017年 huangjinbiao. All rights reserved.
//

import UIKit
import SDWebImage

class HomeCell: UITableViewCell {
    @IBOutlet weak var userNameLabel: UILabel!
    @IBOutlet weak var userIcon: UIImageView!
    @IBOutlet weak var creatTimeLabel: UILabel!
    @IBOutlet weak var contentLabel: UILabel!
    @IBOutlet weak var sourceLabel: UILabel!
    @IBOutlet weak var vipIcon: UIImageView!
    @IBOutlet weak var memberIcon: UIImageView!
    
    
    var status : Status?{
        didSet{
            userNameLabel.text = status?.user?.screen_name
            let iconUrl = URL(string: status!.user!.profile_image_url!)
            userIcon.sd_setImage(with: iconUrl)
            creatTimeLabel.text = status?.created_at
            contentLabel.text = status?.text
            
            // 2.设置认证图标
            if let type = status?.user?.verified_type
            {
                var name = ""
                switch type
                {
                case 0:
                    name = "avatar_vip"
                case 2, 3, 5:
                    name = "avatar_enterprise_vip"
                case 220:
                    name = "avatar_grassroot"
                default:
                    name = ""
                }
                vipIcon.image = UIImage(named: name)
            }
            
            // 4.设置会员图标
            if let rank = status?.user?.mbrank
            {
                if rank >= 1 && rank <= 6
                {
                    memberIcon.image = UIImage(named: "common_icon_membership_level\(rank)")
                    userNameLabel.textColor = UIColor.orange
                }else
                {
                    memberIcon.image = nil
                    userNameLabel.textColor = UIColor.black
                }
                
            }
            
            //来源
            if let sourceStr: NSString = status?.source as NSString?, sourceStr != ""
            {
                // 6.1获取从什么地方开始截取
                let startIndex = sourceStr.range(of: ">").location + 1
                // 6.2获取截取多长的长度
                let length = sourceStr.range(of: "<", options: NSString.CompareOptions.backwards).location - startIndex
                
                // 6.3截取字符串=
                let rest = sourceStr.substring(with: NSRange(location: startIndex,length: length))
                
                sourceLabel.text = "来自: " + rest
            }
            
            // 5.设置时间
            /**
             刚刚(一分钟内)
             X分钟前(一小时内)
             X小时前(当天)
             
             昨天 HH:mm(昨天)
             
             MM-dd HH:mm(一年内)
             yyyy-MM-dd HH:mm(更早期)
             */
            // "Sun Dec 06 11:10:41 +0800 2015"
            creatTimeLabel.text = "刚刚" //status?.created_at
            if let timeStr = status?.created_at
            {
                //                timeStr = "Sun Dec 05 12:10:41 +0800 2014"
                
                // 1.将服务器返回的时间格式化为NSDate
                let formatter = DateFormatter()
                formatter.dateFormat = "EE MM dd HH:mm:ss Z yyyy"
                // 如果不指定以下代码, 在真机中可能无法转换
                formatter.locale = NSLocale(localeIdentifier: "en") as Locale!
                let createDate = formatter.date(from: timeStr)!
                
                // 创建一个日历类
                let calendar = Calendar.current
                /*
                 // 该方法可以获取指定时间的组成成分 |
                 let comps = calendar.components([NSCalendarUnit.Year, NSCalendarUnit.Month, NSCalendarUnit.Day], fromDate: createDate)
                 NJLog(comps.year)
                 NJLog(comps.month)
                 NJLog(comps.day)
                 */
                
                var result = ""
                var formatterStr = "HH:mm"
                if calendar.isDateInToday(createDate)
                {
                    // 今天
                    // 3.比较两个时间之间的差值
                    let interval = NSDate().timeIntervalSince(createDate)
                    
                    if interval < 60
                    {
                        result = "刚刚"
                    }else if interval < 60 * 60
                    {
                        result = "\(interval / 60)分钟前"
                    }else if interval < 60 * 60 * 24
                    {
                        result = "\(interval / (60 * 60))小时前"
                    }
                }else if calendar.isDateInYesterday(createDate)
                {
                    // 昨天
                    formatterStr = "昨天 " + formatterStr
                    formatter.dateFormat = formatterStr
                    result = formatter.string(from: createDate)
                }else
                {
                    // 该方法可以获取两个时间之间的差值
//                    let comps  = calendar.components(NSCalendar.Unit.Year, fromDate: createDate, toDate: NSDate(), options: NSCalendar.Options.matchFirst)
                    let unitSet = NSSet(objects: Calendar.Component.year)
                    let comps = calendar.dateComponents(unitSet as! Set<Calendar.Component>, from: createDate, to: NSDate() as Date)
                    if comps.year! >= 1
                    {
                        // 更早时间
                        formatterStr = "yyyy-MM-dd " + formatterStr
                    }else
                    {
                        // 一年以内
                        formatterStr = "MM-dd " + formatterStr
                    }
                    formatter.dateFormat = formatterStr
                    result = formatter.string(from: createDate)
                }
                
                creatTimeLabel.text = result
            }
        }
    }

    override func awakeFromNib() {
        super.awakeFromNib()
        // Initialization code
    }
    
    class func getCell(tableView : UITableView) -> HomeCell {
        var cell : HomeCell? = tableView.dequeueReusableCell(withIdentifier: "homeCell") as! HomeCell?
        guard let tempCell = cell else {
            cell = Bundle.main.loadNibNamed("HomeCell", owner: self, options: nil)?.first as? HomeCell
            return cell!
        }
        return tempCell
        
    }
    
}
