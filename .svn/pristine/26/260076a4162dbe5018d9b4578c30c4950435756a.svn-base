//
//  BrowserController.swift
//  SwiftWB
//
//  Created by huangjinbiao on 17/2/28.
//  Copyright © 2017年 huangjinbiao. All rights reserved.
//

import UIKit
import SDWebImage

class BrowserController: UIViewController {
    
    var picArray:[URL] = []
    var index : IndexPath?
    
    class BrowserLayout: UICollectionViewFlowLayout {
        override func prepare() {
            itemSize = kScreenBounds.size
            minimumLineSpacing = 0
            minimumInteritemSpacing = 0
            collectionView?.isPagingEnabled = true
            scrollDirection = UICollectionViewScrollDirection.horizontal
            collectionView?.bounces = false
            collectionView?.showsVerticalScrollIndicator = false
            collectionView?.showsHorizontalScrollIndicator = false
        }
    }
    
    var collectionView :UICollectionView = {
        MYLOG(message: "创造collectionView")
        let clect = UICollectionView(frame: CGRect.zero, collectionViewLayout: BrowserLayout())
        clect.register(BrowserCell.classForCoder(), forCellWithReuseIdentifier: "BrowserCell")
        return clect
    }()
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        GlobalSession.shareInstance.currentVC = self
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        
        collectionView.scrollToItem(at: index!, at: UICollectionViewScrollPosition.left, animated: false)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = UIColor.white
        view.addSubview(collectionView)
//        collectionView.delegate = self
        collectionView.dataSource = self
        collectionView.frame = kScreenBounds
    }
    
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        dismiss(animated: true, completion: nil)
    }

}

extension BrowserController:UICollectionViewDataSource{
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return picArray.count
    }
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "BrowserCell", for: indexPath) as! BrowserCell
        cell.imageURL = picArray[indexPath.item]
        return cell
        
    }
}



class BrowserCell: UICollectionViewCell,UIGestureRecognizerDelegate, UIScrollViewDelegate{
    override init(frame: CGRect) {
        super.init(frame: frame)
        setupUI()
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    var imageURL: URL?
        {
        didSet
        {
            // 重置容器所有数据
            resetView()
            imageView.sd_setImage(with: imageURL!) { (image, erroe, _, url) in
                let width = kScreenW
                let height = kScreenH
                // 1.计算当前图片的宽高比
                let scale = image!.size.height / image!.size.width
                // 2.利用宽高比乘以屏幕宽度, 等比缩放图片
                let imageHeight = scale * width
                // 3.设置图片frame
                self.imageView.frame = CGRect(origin: CGPoint.zero, size: CGSize(width: width, height: imageHeight))
                
                // 4.判断当前是长图还是短图
                if imageHeight < height
                {
                    // 短图
                    // 4.计算顶部和底部内边距
                    let offsetY = (height - imageHeight) * 0.5
                    
                    // 5.设置内边距
                    self.scrollview.contentInset = UIEdgeInsets(top: offsetY, left: 0, bottom: offsetY, right: 0)
                }else
                {
                    self.scrollview.contentSize = CGSize(width: width, height: imageHeight)
                }
            }
        }
    }
    
    // MARK: - 内部控制方法
    private func setupUI()
    {
        // 1.添加子控件
        contentView.addSubview(scrollview)

        let tapGest = UITapGestureRecognizer()
        tapGest.numberOfTapsRequired = 1
        tapGest.delegate = self
        scrollview.addGestureRecognizer(tapGest)
        tapGest.addTarget(self, action: #selector(tapScrollView))
        scrollview.addSubview(imageView)
        
        // 2.布局子控件
        scrollview.frame = kScreenBounds
    }
    
    // MARK: - 内部控制方法
    private func resetView()
    {
        scrollview.contentSize = CGSize.zero
        scrollview.contentInset = UIEdgeInsets.zero
        scrollview.contentOffset = CGPoint.zero
        imageView.transform = CGAffineTransform.identity
    }
    
    @objc private func tapScrollView() -> () {
        GlobalSession.shareInstance.currentVC?.dismiss(animated: true, completion: nil)
    }
    
    // MARK: - 懒加载
    // MARK: - 懒加载
    private lazy var scrollview: UIScrollView = {
        let sc = UIScrollView()
        sc.maximumZoomScale = 2.0
        sc.minimumZoomScale = 0.5
        sc.delegate = self
        return sc
    }()
    private lazy  var imageView: UIImageView = UIImageView()
    
    // MARK: - UIScrollViewDelegate
    // 告诉系统需要缩放哪一个控件
    func viewForZooming(in scrollView: UIScrollView) -> UIView? {
        return imageView
    }
    
    // 缩放的过程中会不断调用
    func scrollViewDidZoom(_ scrollView: UIScrollView) {
        let width = kScreenW
        let height = kScreenH
        // 1.计算上下内边距
        var offsetY = (height - imageView.frame.height) * 0.5
        // 2.计算左右内边距
        var offsetX = (width - imageView.frame.width) * 0.5
        
        offsetY = (offsetY < 0) ? 0 : offsetY
        offsetX = (offsetX < 0) ? 0 : offsetX
        
        scrollView.contentInset = UIEdgeInsets(top: offsetY, left: offsetX, bottom: offsetY, right: offsetX)
    }
}
